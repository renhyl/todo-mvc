input AddItemInput {
  text: String!
}

type AddItemOutput {
  error: Error
  item: TodoItem
}

"""Date custom scalar type"""
scalar DateTime

type DeleteItemOutput {
  error: Error
  item: TodoItem
}

type Error {
  code: String!
  message: String!
}

input ItemOrderByInput {
  createdAt: Sort
  id: Sort
  text: Sort
}

type ItemUpdate {
  item: TodoItem!
}

type Mutation {
  addItem(input: AddItemInput!): AddItemOutput!
  changeTextItem(item: ID!, text: String!): UpdateItemOutput!
  deleteCompleteItems(items: [ID!]!): UpdateItemsOutput!
  deleteItem(item: ID!): DeleteItemOutput!
  toggleItem(completed: Boolean!, item: ID!): UpdateItemOutput!
  toggleItems(completed: Boolean!, items: [ID!]!): UpdateItemsOutput!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  items(after: String, completed: Boolean, createdAt: DateTime, first: Int, orderBy: ItemOrderByInput): TodoItemConnection!
}

enum Sort {
  asc
  desc
}

type Subscription {
  itemDel: ItemUpdate!
  itemUpdate: ItemUpdate!
  itemsDel: UpdateItemsOutput!
  newItem: ItemUpdate!
  toggleAll: UpdateItemsOutput!
}

type TodoItem {
  completed: Boolean!
  createdAt: DateTime!
  id: ID!
  text: String!
}

type TodoItemConnection {
  edges: [TodoItemEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TodoItemEdge {
  cursor: String
  node: TodoItem
}

type UpdateItemOutput {
  error: Error
  item: TodoItem
}

type UpdateItemsOutput {
  error: Error
  items: [TodoItem]
}
